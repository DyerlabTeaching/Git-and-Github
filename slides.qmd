---
title: "Git & GitHub"
subtitle: "&nbsp;"
author: Rodney Dyer, PhD
format: 
  revealjs:
    background-transition: fade
    theme: default
title-slide-attributes: 
  data-background-image: "media/contour.png"
  data-background-position: "right"
  data-background-size: initial
---

# Git ? {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}





## {background-image="media/problem-admitting.jpg" background-size="fit"}


## Look Familiar? {background-image="media/file_naming.png" background-size="initial"}


## What is Git

Git is a distributed *versioning system*

:::{.incremental}
- Easy for collaboration.  
- Easy track entire history of changes in your projects, documents, and code.  
- Complete history of all changes.
- Easily revert to previous instances.
- Project Based.
- Branching
:::


## Lifetime of a Document

Consider a single file.  After the first edit, you now have two differents ones.  

```{mermaid}
graph LR
  A[File v1] -->|Edited| B[File v2]
```


:::{.fragment .fade-in}
In Google Docs, you can see the version history (and revert) while in Word you can use track changes to see edits but revisions are more complicated...
:::


## Persistence through Diffs

What we **do not do** is keep multiple versions of the file around as complete files.  What is done is that the original document and only the changes made to the file—called *diffs*—are saved.

:::{.fragment .fade-in}
![](media/diff.png)
:::


## Lifetime of a Document

Add a new figure to the file and now you have three different entities.

```{mermaid}
graph LR
  A[File v1] -->|Edited| B[File v2]
  B -->|New Figure| C[File v3]
```


## Lifetime of a Document

Perhaps the figure did not work out, and you decided to replace it with an image.

```{mermaid}
graph LR
  A[File v1] -->|Edited| B[File v2]
  B -->|Figure| C[File v3]
  B -->|Table| D[File v4]
```

For each new "revision", you create a separate instance of the file itself.


## Lifetime of a Document

Continue editing and making revisions.

```{mermaid}
graph LR
  A[File v1] -->|Edited| B[File v2]
  B -->|Figure| C[File v3]
  B -->|Table| D[File v4]
  D -->|Edited| E[File v5]
```


## Lifetime of a Document

Eventually, you finish making revisions to the file.

```{mermaid}
graph LR
  A[File v1] -->|Edited| B[File v2]
  B -->|Figure| C[File v3]
  B -->|Table| D[File v4]
  D -->|Edited| E[File v5]
  E -->|Submitted| F[Thesis!]
```

:::{.fragment .fade-in}
**Git** allows you to have access to the entire *history* of the file and can *revert* to any of the previous version you want to.
:::


## Lifetime of a Document

Not all documents are incremental. Submitting for publication requires a different layout, citation format, etc. than for your thesis.  Both of these are derived from *File v5* as different *branches*.

```{mermaid}
graph LR
  A[File v1] -->|Edited| B[File v2]
  B -->|Figure| C[File v3]
  B -->|Table| D[File v4]
  D -->|Edited| E[File v5]
  E -->|Submitted| F[Thesis!]
  E -->|Submitted| G[Publication]
```



## Git in Projects

This is a process that can include hundreds of files, data sets, images, shapefiles, etc.  It is a *Project Based* approach.  

And the entire project is referred to as a **Repository**.


## Remote Locations

A git repository can live in many places.

:::{.incremental}
- On your laptop  
- On the lab computer  
- On a thumb drive (please do not use these any more)  
- On your home computer
- On you iPhone
:::

## Synchronizing Repositories

Having a single remote **Repository** allows you to keep all the remote repositories in sync.

:::{.incremental}
1. Establish Repository on [GitHub](https://github.com).  
2. **Clone** that repository to your local computer.
3. Make changes.
4. **Commit** changes when you are at a logical stoping point.
4. **PUSH** the one or more committed changes to [GitHub](https://github.com).
5. On other computers with *local* copies, you **PULL** changes from [GitHub](https://github.com) to retrieve any changes you've made.
:::


## Pulling & Pushing.

For all these computers, you need to make sure you are *pushing* changes to [GitHub](https://github.com) from your current machine so that when you get to the next computer you can *pull* down these changes.


## Collaborations

With a [GitHub](https://github.com) repository, several people can contribute to the same project and have access to the same content.

:::{.incremental}
- Can lead to conflicts
- Merging files
:::


## [GitHub](https://github.com)


# {background-image="media/github.png" background-size="fit"}


## Github Repositories

:::: {.columns}

::: {.column width="30%"}
- history  
- files  
- description  
- settings  
- visibility  
- access  

:::

::: {.column width="70%"}
![](media/repo.png)
:::

::::


## Access Controls

[GitHub](https://github.com) has a fine granularity of control over who can access content and how much access they can have.

::: {.incremental}
- Username + Password: Allows you to log into [GitHub](https://github.com).
- Access Control: Dictates who can see and check out repositories.
- Username + Personal Access Token: Allow you to push content back to [GitHub](https://github.com).
:::


## User Names & Passwords

If you are not using a password manager, PLEASE START TODAY.

- 1Password
- LastPass
- mCrypt


## Personal Access Tokens

`Settings` $\to$ `Developer Settings` $\to$ `Personal Access Tokens` 

![](media/AccessTokens.png)


## Scoped Tokens {.smaller}

![](media/ClassicAccessTokens.png)

Select custom length and allow for enough time to not be a *problem*.  Save long token securely.


## Creating a 



## Questions

::: {layout-ncol="2"}
If you have any questions, please feel free to either post them as an "Issue" on your copy of this GitHub Repository, post to the [Canvas](https://canvas.vcu.edu) discussion board for the class, or drop me an [email](mailto://rjdyer@vcu.edu).

![](media/peter_sellers.gif){.middle fig-alt="Peter Sellers looking bored" fig-align="center" width="500"}
:::
